from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.types import CallbackQuery
from bd_functions import *
from api_Requests.reg import register
from api_Requests.get_shedule import shedule
from api_Requests.get_lessons import lessons
from add_data import *
from keybords import *

router = Router()



@router.message(Command("start"))
async def start_handler(msg: Message):
    """–ù–∞—á–∞—Ç—å"""
    user_id = str(msg.from_user.id)
    if not(check_user_exists(user_id)):
        keyboard_years = create_years_keyboard()
        await msg.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ö–Ω–ê–ì–£.  –¢—ã –º–æ–∂–µ—à—å –∫–æ –º–Ω–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–µ—Å—Å–∏–∏, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ....")
        await msg.answer("–î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è! –î–ª—è –Ω–∞—á–∞–ª–∞, –≤—ã–±–µ—Ä–∏ –≥–æ–¥ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –í–£–ó", reply_markup=keyboard_years)
    else:
        func_keyboard = create_functions_keyboard()
        name = str(msg.from_user.first_name)
        await msg.answer(f"–ü—Ä–∏–≤–µ—Ç, {name}" , reply_markup=func_keyboard)




@router.callback_query(lambda c: c.data and c.data.startswith('year_'))
async def process_year_callback(callback_query: CallbackQuery):
    """–í—ã–±–∏—Ä–∞–µ–º –≥–æ–¥ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è"""
    year = callback_query.data.split('_')[1]
    groups = get_groups(year)
    keyboard_groups = create_groups_keyboard(groups)
    await callback_query.message.edit_text(
        text="–û—Ç–ª–∏—á–Ω–æ! –ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É",
        reply_markup=keyboard_groups
    )


@router.callback_query(lambda c: c.data and c.data.startswith('group_'))
async def process_year_callback(callback_query: CallbackQuery):
    """–í—ã–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø—É"""
    user_id = str(callback_query.from_user.id)
    name = str(callback_query.from_user.first_name)
    group = str(callback_query.data.split('_')[1])
    group_uuid = str(get_uuid_group(group)) #–ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    keyboard_func = create_functions_keyboard() # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if register(user_id, name, group_uuid):
        await callback_query.message.edit_text(
            text="–û—Ç–ª–∏—á–Ω–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!"
        )
        await callback_query.message.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard_func
        )
        await callback_query.answer()
    else:
        await callback_query.message.answer(
            text="–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!"
        )
        await callback_query.answer()


@router.message(lambda message: message.text == "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é üìÖ")
async def show_week_schedule(message: Message):
    group_uuid = get_user_uuid_group(str(message.from_user.id))
    schedule = shedule(group_uuid)

    keyboard = shedule_keyboard(schedule)
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:",
        reply_markup=keyboard.as_markup()
    )


@router.callback_query(lambda c: c.data and c.data.startswith('schedule_'))
async def show_day_schedule(callback_query: CallbackQuery):
    group_uuid = get_user_uuid_group(str(callback_query.from_user.id))
    schedule = shedule(group_uuid)
    day = callback_query.data.split('_')[1]

    if day not in schedule:
        await callback_query.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return

    lessons = schedule[day]
    text = f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}:</b>\n\n"
    if not lessons:
        text += "  <i>–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π</i>\n"
    else:
        for i, lesson in enumerate(lessons, 1):
            if lesson['–ü—Ä–µ–¥–º–µ—Ç'] == "-":
                continue
            text += f"    <i>{digits[i - 1]} {pair_times[i - 1]}.\n    <b>{lesson['–ü—Ä–µ–¥–º–µ—Ç']}</b>: {lesson['–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è']}</i>\n"
            text += f"    <i>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lesson['–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å']}</i>\n"
            text += f"    <i>–ê—É–¥–∏—Ç–æ—Ä–∏—è: {lesson['–ê—É–¥–∏—Ç–æ—Ä–∏—è']}</i>\n\n"

    await callback_query.message.edit_text(
        text=text,
        parse_mode="HTML",
        reply_markup=callback_query.message.reply_markup
    )
    await callback_query.answer()


@router.message(lambda message: message.text == "–ê–≤—Ç–æ-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚åöÔ∏è")
async def set_auto_shedule(message: Message):
    keyboard_auto = create_auto_keyboard()
    await message.answer("<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</b> \n –ï—Å–ª–∏ –≤–∫–ª—é—á–∏—Ç—å, –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å –≤ 6 —É—Ç—Ä–∞", reply_markup=keyboard_auto)


@router.callback_query(lambda c: c.data == "auto_on")
async def enable_auto_schedule(callback_query: CallbackQuery):
    func_keyboard = create_functions_keyboard()
    await callback_query.message.edit_text(
        "<b>–ê–≤—Ç–æ-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ ‚úÖ</b>\n\n"
        "–ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 6 —É—Ç—Ä–∞.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
        parse_mode="HTML"
    )
    await callback_query.answer("–ê–≤—Ç–æ-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ!")



@router.message(lambda message: message.text == "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é üîë")
async def set_disciplines(message: Message):
    disciplins = lessons(str(message.from_user.id))
    discipline_list = disciplins[0]["–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã"]

    disc_keyboard = create_disciplins_keyboard(discipline_list)

    await message.answer(
        text="–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—ã",
        reply_markup=disc_keyboard
    )

@router.callback_query(lambda c: c.data and c.data.startswith('dis_'))
async def get_subject(callback_query: CallbackQuery):
    discioline = callback_query.data.split('_')[1]
    recomend_keyboard = create_recomendation_keyboard()
    await callback_query.message.edit_text(f"–í—ã–±—Ä–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: {discioline}",parse_mode="HTML", reply_markup=recomend_keyboard)




